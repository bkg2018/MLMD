.topnumber 3
# Writing source files.fr((Rédaction des fichiers sources.))

The file sources must be named with a `.base.md` or `.mlmd` extension. They are UTF-8
text files with Linux/macOS or Windows end of lines. MLMD is UTF-8 compliant so macOS
and Windows encoding could have side effect, as any character between codes 128 and 255
would be invalid UTF-8. The source files must use UTF-8 for any characters other than ASCII.
.fr((
Les fichiers source doivent posséder une extension `.base.md` ou `.mlmd`. Leur contenu
est du texte encodé en UTF-8 avec des fins de ligne Windows ou Linux/macOS. MLMD est
conforme à UTF-8, aussi un encodage Windows ou macOS aurait des effets erratiques, les 
codes de caractère entre 128 et 255 étant invalides en UTF-8. Les fichiers source doivent
impérativement utiliser l'encodage UTF-8 pour tout caractère hors de l'ASCII (codes 0 à 127).
.))

The user has total control over which languages he/she wants to put in the sources.
Each language must be declared with one user chosen code. Using ISO standard codes
like `en-US` or `fr-FR` allow to easily link standard Web APIs for nation flags or
other international content, but more simple codes like `en` or `fr` are faster and
easier to write and can be associated to an optional ISO code. Both the language code and
the associated ISO code can be referenced in source text using variables which are
addressed later in this documentation. Look for `ISO 639` standard on the Web to find out
which code would be appropriate for your needs, as multiple standard versions exist.
.fr((
L'utilisateur contrôle les langages qu'il souhaite utiliser dans les fichiers source.
Chaque langage est déclaré avec un code choisi par l'utilisateur. L'utilisation de
codes ISO standards comme `en-US` ou `fr-FR` facilite la rédaction de liens avec des API
Web pour les nations, les drapeaux et d'autres contenus internationaux mais des codes
plus simples comme `en` ou `fr` sont plus faciles et rapides à rédiger et peuvent être
associés à un code ISO. Le code du langage et le code ISO peuvent tous deux être référencés
dans le texte source à l'aide de variables détaillées plus loin dans ce document. Cherchez
`ISO 639` sur le Web pour savoir quels codes seraient appropriés selon vos besoins, car
il existe plusieurs versions du standard.
.))

See [`.language` directive](#declaring-languages-languages-directive) for the syntax
of languages declaration.
.fr((Voir [Directive `.language`]())) pour la syntaxe de la déclaration des langues..))

## Source beginning.fr((Début de fichier source.))

MLMD will not output anything into any file until it first meet a `.languages` directives
setting the output language codes. This is a restriction over all the input files present
in the input root directory and in subdirectories. The best practice is to put the `.languages`
directive in the first lines of the main input file. If the `.languages` directive appears
late in its file, any text before it will be ignored so if the output files look strange
and miss large parts fo text, the first thing to check is the `.languages` directive position.
.fr((
MLMD ne génère aucun texte dans aucun fichier tant qu'il n'a pas rencontré au moins une directive
`.languages` déclarant les codes de langue utilisés. C'est une contrainte globale à l'ensemble
des fichiers passés en paramètre ou présents dans le répertoire du fichier principal et
ses sous-répertoires. Une bonne pratique est de placer la directive `.languages` au début du
fichier principal. Si la directive survient loin dans un fichier, tout ce qui la précède
est ignoré, aussi lorsque les fichiers générés paraissent étranges ou s'il manque une grosse
partie de texte, la première chose à vérifier est l'emplacement de la directive `.languages`.
.))

A best practice can be to put the same `.languages` directive at the start of all source files
so there is no ambiguous interpretation but it's not mandatory.
.fr((Pour éviter les ambigüités on peut placer la même directive `.languages` au début de chacun
des fichiers sources traités mais ce n'est pas obligatoire.))

- Any text before the `.languages` directive is ignored and not sent to any output file.
.fr((- Tout texte précédant la première directive `.languages` est ignoré et ne sera générés
  dans aucun fichier..))
- The `.languages` directive must be written at the beginning of a separate line with no 
  other content than its own parameters.
.fr((- La directive `.languages` doit être placée au début d'une ligne isolée sans aucun
  autre contenu que ses propres paramètres..))
- Having some content before the heading level 1 is not conforming to Markdown conventions,
  but MLMD will write any text before the heading level 1 into all generated files, provided
  it appears after the .languages directive.
.fr((- Les conventions Markdown interdisent tout contenu avant le titre de niveau 1 qui est
  considéré comme le titre du fichier, mais MLMD ignore cela et génère tout texte précédant
  le premier titre, à condition qu'il se situe après la première directive `.languages`..))
- The optional `.numbering` and `.topnumber` directives can be placed between the `.languages`
  and the level 1 `#` heading. The `.numbering` is ignored if a `-numbering` parameter is
  given to the command line.
.fr((- Les directives facultatives `.numbering` et `.topnumber` peuvent se situer entre
  la directive `.languages` et le titre de niveau 1 `#`. Le `.numbering` sera ignoré si
  un paramètre `-numbering` a été fourni à la ligne de commande..))

## Including files.fr((Inclusion de fichiers.))

Any file set by the `-i` command line parameters or from scanning the starting directory
can add other files in the set of input files. File inclusion do not actually insert a file content
but rather include the file into the set of processed files.
.fr((Tout fichier indiqué dans un paramètre `-i` de la ligne de commande ou résultant
de l'exploration du répertoire de démarrage peut ajouter d'autres fichiers à la liste de ceux
traités. L'inclusion n'insère pas réellement le texte d'un autre fichier à un endroit
d'un autre fichier mais l'ajoute à l'ensemble des fichiers sources..))

This allows a main file to reference the various parts of documentation from separate files
and keep a clean and simple main file with a global table of contents.
.fr((Cette fonction permet à un fichier principal de référencer des fichiers dans lesquels
se trouvent les différentes parties de la documentation tout en conservant un fichier principal
simple et propre avec un sommaire global..))

### Include directive.fr((Directive d'inclusion.))

The `.include` directive is followed by a relative file name which must be accessible
from the main file root directory. The file is not necessarily relative to the file
where the directive lies. It is written after the directive with no special delimiter
or quote characters around it and it ends the line.
.fr((La directive `.include` est suivie d'un nom relatif de fichier qui doit être accessible
à partir du répertoire du fichier principal. Le fichier inclus n'est pas forcément relatif
à celui où se trouve la directive mais plutôt au fichier principal, par exemple indiqué par
le paramètre `-main` de la ligne de commande. Le nom suit la directive sans délimiteur
particulier ou guillemets autours de lui..))

MLMD documentation is organized as a main `README.mlmd` file with a main title and
a global Table of Contents, which includes 5 other files containing the different parts
of documentation. This maintains a clean and simple main file from which the reader can jump
to any part of documentation using the global TOC:
.fr((La documentation MLMD est organisée en un fichier principal `README.mlmd` avec un titre
principal et un sommaire global, qui inclut 5 autres fichiers contenant les parties de la
documentation. Ceci maintient un fichier principal clair et simple à partir duquel
le lecteur peut sauter aux diverses parties de la documentation grâce aux liens du sommaire :.))

```code
  .include docs/1-Installation.mlmd
  .include docs/2-Using.mlmd
  ...
```

In this extract from the main `README.mlmd` file, the included files are in a `docs`
folder which lies at the same level as the `README.mlmd` file itself. The headings
in these files can be included in a global toc in the main file:
.fr((Dans cet extrait du fichier `README.mlmd` les fichiers inclus sont dans le répertoire
`docs`situé au même niveau que le `README.mlmd`. Les titres de ces fichiers sont inclus
dans le sommaire global du fichier principal :.))

```code
  .toc level=1-3
```

This global Table Of Content will features headings level 1 to 3 from each processed file
including the one declared in `.include` directives even if only `README.mlmd` is given in
a `-i` command line parameter.
.fr((Le sommaire global contiendra tous les titres de fichiers de niveau 1 à 3 y compris
ceux des fichiers indiqués dans les directives `.include`, bien qu'ils ne soient pas
listés dans les paramètres `-i` de la ligne de commande..))

### Numbering main and included files.fr((Numérotation des fichiers.))

To control numbering of the main and included files the `.topnumber` directive allow
setting of each file level 1 heading. A good way of using it is to put .`topnumber 0`
in the main file to cancel numbering of its file title, then include the other files
and put `.topnumber` directives with numbers 1 and above to make sure te files will
appear with the right number in a global TOC.
.fr((Pour contrôler la numérotation des fichiers principaux et inclus, la directive
`.topnumber` règle le numéro du titre de niveau 1 dans un fichier. Un bon moyen de l'employer 
est d'utiliser `.topnumber 0` dans le fichier principal pour supprimer la numérotation de son
titre de niveau 1, puis d'inclure une directive `.topnumber` dans chaque fichier inclus
pour indiquer l'ordre dans lequel ils doivent apparaitre dans le sommaire global..))

The MLMD documentation uses this scheme:
.fr((La documentation MLMD utilise ce schéma :.))

- the main `README.mlmd` uses `.topnumber 0` to neutralize its level 1 heading numbering,
  and use `.include docs/1-Installation.mlmd` to include one file. The `#` heading is followed 
  by an introduction and then a `.toc` directive allowing levels 1 to 3 of all headings:
.fr((- le fichier `README.mlmd` utilise `.topnumber 0` pour neutraliser la numérotation de
son titre de niveau 1 et utilise `.include docs/1-Installation.mlmd` pour inclure un fichier.
Le titre `#` est suivi d'une introduction puis d'une directive `.toc` incluant les niveaux 1 à 3
des titres :.))

```code
  .numbering 1::&I:-,2::1:.,3::1
  .topnumber 0
  .include docs/1-Installation.mlmd
  .include docs/2-Using.mlmd
  ...
  .toc title=Table Of Contents.fr((Sommaire.)) level=1-3
```

- the included files use their own `.topnumber` value, which determine their order in the
  global TOC:
.fr((- les fichiers inclus comportent leur propre valeur derrière `.topnumber`, ce qui détermine
leur ordre dans le sommaire global :.))

```code
  .topnumber 1
  ...
```

Refer to MLMD own's documentation for a complete example of MLMD `.include` and `.topnumber` use.
.((La documentation de MLMD illustre l'utilisation des directivess `.include` et `.topnumber`..))

## Headings.fr((Titres.))

MLMD requires `#` prefixed headings and doesn't recognize the alternate syntax for
level 1 and 2 headings, which is available by adding `==` or `--` on the line
following the heading. The `==`and `--` lines can be used but will not be sufficient
for a heading to be recognized by MLMD.
.fr((MLMD reconnait les symboles `#` en début de ligne comme préfixe indiquant
un niveau de titre. Il ne reconnait pas les syntaxes alternatives des niveaux 1 et 2
accessibles en soulignant les titres avec `==` ou `--` sur la ligne suivante. Ces
syntaxes peuvent être utilisées afin d'apparaitre dans les fichiers Markdown générés
mais elles ne suffiront pas pour que MLMD reconnaisse les titres et les inclue dans
le schéma de numérotation ou les sommaires..))

.((
```code
# This heading will be found by MLMD

This one won't be found because it doesn't have a # prefix
==========================================================

## This one will be found by its ## prefix
------------------------------------------
```
.)).fr((
```code
# Ce titre sera reconnu par MLMD

Celui-ci sera pas reconnu car il ne possède pas de préfixe #
============================================================

## Celui-ci sera reconnu grâce à son préfixe ##
-----------------------------------------------
```
.))

The `#` prefix must be followed by at least one space. Closing `#` have no particular effect.
Markdown conventions allow an empty line after a heading, MLMD doesn't change this but allow
more than one empty line, although it will only generate one in final Markdowns.
.fr((Les préfixes `#` doivent être suivis d'au moins un espace, les éventuels suffixes `#`
n'ont pas d'effet particulier..)) Par convention dans un fichier Markdown on peut faire suivre
les titres d'une ligne vide, MLMD accepte même plusieurs lignes vides mais n'en écrira qu'une
dans les fichiers générés.

## End-of-Lines and End-of-Paragraphs.fr((Fin de ligne et fin de paragraphe.))

By default, except for headings and one-line directives, MLMD sources paragraphs are recognized
by MLMD as default text paragraphs which goes in all the language specific generated files except
those with corresponding language-specific parts. End of lines will be reproduced in generated
files, and empty lines will also make their way to generated files.
.fr((Par défaut, en dehors des titres et des directives spéciales qui occupent une ligne,
MLMD interprète les paragraphes des fichiers sources comme du texte par défaut qui va dans tous
les fichiers générés pour chaque langage sauf ceux qui ont une section spécifique. Les fins
de ligne et les lignes vides seront reproduites dans les fichiers générés..))

A language specific section can follow a corresponding default text paragraph if it is separated
by not more than one end of line, meaning it can follow the default text on the same line or 
starting on the next line. In that special case, the end of line separating default text from the
language start marker will be ignored by MLMD. This feature allows a clean separation of default
text paragraphs and language specific matching paragraphs. In practice, MLMD ignores a single end
of line when it only separates two languages parts. Doubled end of lines are always considered
as text for the current language and will appear as such in generated files. This allow a clean
organisation of translated text while conforming to Markdown.
.fr((Une section de texte propre à un langage peut directement suivre le texte par défaut soit sur la
même ligne, soit sur la ligne suivante. Dans ce cas particulier, la fin de ligne est ignorée
par MLMD. Cette particularité permet de séparer proprement les paragraphes de texte par défaut
et ceux des autres langues. En pratique, MLMD ignore les fins de ligne uniques quand elles séparent
juste une partie d'une langue d'une autre. Les fins de ligne doublées sont considérées comme
appartenant au texte pour la langue en cours et seront écrites dans les fichiers générés. Ceci
permet une une organisation plus claire du texte tout en respectant Markdown..))

Notice: the `.language((` and `.))` markers for language parts used in following examples will be
detailed later, they start or end a language specific part.
.fr((Note : les marqueurs `.langue((` et `.))` dans les exemples et le texte suivant seront détaillés
plus loin, ils ouvrent ou ferment une partie propre à une langue..))

.((
```code
This will be default text going in all languages files by default.
.fr((This will only go in french language file, which will not feature previous default text..))

This will be default text for all files except french file..fr((This will go into the french
file in place of previous default text..))
```
.)).fr((
```code
Ceci est du texte par défaut qui ira dans tous les fichiers sauf le français.
.fr((Ceci est du texte qui ira dans le fichier français à la place du texte précédent..))

Ce texte ira dans tous les fichiers sauf le français..fr((Ce texte ira dans le
fichier français à la place du précédent..))
```
.))

Normal Markdown conventions generally assume that text lines should not be larger than about
80 characters but MLMD sources do not enforce this limit. All text for all languages of a given
paragraph can be typed on a single line or not, and use any line length.
.fr((Par convention Markdown recommande de ne pas dépasser environ 80 caractères par ligne
toutefois MLMD n'impose pas cette contrainte. Tout le texte de toutes les langues peut
être saisis sur une seule ligne ou plusieurs et n'importe quelle largeur de ligne convient..))

Here is an example:.fr((Voici un autre exemple :.))

```code
.((default text.))
.fr((texte français.))
.en((english text.))

Some other text....fr((Autre texte....))
```

MLMD interprets the three lines block this way:
.fr((MLMD interprète le bloc de trois lignes de cette façon :.))

1. The block starts line 1 by setting default text which will go in all generated file except those
   for which a language specific section is found.
.fr((1. Le bloc commence sur la première ligne avec du texte par défaut qui ira dans 
   les fichiers de toutes les langues sauf celles possédant du texte spécifique.))
2. The end-of-line at line 1 is ignored because it is immediately followed by another directive.
.fr((2. La fin de ligne de la première ligne est ignorée car elle est immédiatement
   suivie d'une directive de langue.))
3. Line 2 will put text only in the FR file, which will ignore the default text.
.fr((3. La deuxième ligne placera le texte dans le fichier de la langue française, qui
   ignorera alors le texte par défaut de la première ligne..))
4. The end-of-line at line 2 is ignored because it is immediately followed by another directive.
.fr((4. La fin de ligne de la deuxième ligne est ignorée car suivie d'une ouverture de langue.))
5. Line 3 will put text only in the EN file, which will ignore the default text.
.fr((5. La troisième ligne place le texte dans le fichier de la langue anglaise, qui ignorera
le texte par défaut..))
6. The double end-of-line after line 3 ends the paragraph and generates text in relevant files.
.fr((6. La double fin de ligne après la troisième ligne termine le paragraphe et la section de
texte multilingue qui précède, retournant en mode texte par défaut.))

Because end-of-lines are ignored when they only separate directives, the following line is
identical to the previous example and both will generate the same text in the same files:
.fr(Etant donné que les fins de ligne entre sections de langue sont ignorées, la ligne suivante
est équivalente au bloc précédent et génèrera le même texte dans les mêmes fichiers :.))

```code
.((default text.)).fr((french text.)).en((english text.))

Some other text....fr((Autre texte....))
```

As this last example shows, both styles can be chosen for source files writing with an
identical effect. Generally, large sections of text for each language can be kept as paragraphs
separated by single ends of line while little text parts can be kept on a same line block.
.fr((Comme l'illustre ce dernier exemple, les deux styles peuvent être employés dans les fichiers
sources avec un effet identique. En général, les parties importantes de texte de chaque langage
peuvent être placées dans des paragraphes séparés par une simple fin de ligne, tandis que les
petites parties de texte pourront être rédigées dans les lignes d'un même bloc..))

### Notes

Although Markdown syntax limits lines to little more than 80 characters, Markdown viewers and
Web Browsers generally do not bother about this limit and will display the text correctly. Similarly,
modern text editors will make the text fit into the displayed width even if there is no end of line.
Most often they feature a 'soft-wrapping' setting or viewing option in menus to put artificial
end-of-lines which aren't actually in the file. For example, this option is called *Toggle Word Wrap* in
Visual Code and is accessible ![in the *View* menu:](Images/word_wrap_vscode.png).
.fr((Bien que la syntaxe Markdown impose une limite de ligne à 80 caractères, les visualiseurs ou
éditeurs de fichiers Markdown ainsi que les browsers Internet ne se préoccupent pas de cette limite
et formatent le texte correctement. De même les éditeurs de texte modernes peuvent formater le texte
sur plusieurs ligne même en l'absence de fin de ligne. La plupart possèdent une commande de formatage
ou un paramètre pour cela dans les menus ou les dialogues de réglages afin d'insérer des fins de ligne
artificielles qui ne se trouvent pas réellement dans les fichiers. Par exemple, dans Visual Code cette
possibilité s'appelle 'soft-wrapping' et on l'active ![dans le menu *View* :](Images/word_wrap_vscode.png)..))

Although this is not mandatory, it is best to be consistent in the style of opening and closing
directives relatively to their text. A file should either use separate lines around the text for both
the opening and the closing directives, either put them on the same line around the text but avoid mixing
both techniques on large parts of text, or it would be unclear where the actual end of lines would be.
.fr((Bien que ce ne soit pas obligatoire, il est préférable de rester cohérent dans le style de rédaction
des paragraphes de texte pour chaque langue. Un fichier peut utiliser des lignes isolées pour l'ouverture
et la fermeture des parties de chaque langues ou les placer à l'intérieur des lignes mais on évitera
de mélanger les styles dans des parties importantes de texte, faute de quoi on ne distingue plus où
seront les vraies fins de ligne.))

- Separated lines:
.fr((*Lignes séparées :.))

  ```code
  .fr((
  Some french text.
  .))
  ```

- Same line:
.fr((Même ligne :.))

  ```code
  .fr((Some french text..))
  ```

## Escaping text.fr((Texte échappé.))

Directives and variables can be neutralized in a text section by surrounding it with the opening
escape `.{` and the closing escape `.}` directives. The directives won't have effect on generated files,
and variables and other directives will be copied as-is without expansion or interpretation.
.fr((Les directives et variables peuvent être neutralisées dans le texte en les entourant avec
le marqueur ouvrant `.{` et le marqueur fermant `.}`. Les directives n'auront aucun effet
sur les fichiers générés, et les variables et les directives seront écrites comme du simple texte
sans interprétation..))

Example:.fr((Exemple :.))

```code
The .{.)).} directive closes a language part.
```

In this exemple, the `.))` directive will be considered as simple text and not as a directive.

## Quoted text and code fences.fr((Texte en citation et barrières de code.))

MLMD roughly copies the parts of text which are surrounded by *back-ticks* (reversed quote),
*double quotes* and *code fences*. In these parts of text, MLMD doesn't interpret directives
and variables:
.fr((MLMD copie telles quelles les parties de texte entourées de guillemets et accent inversé
ainsi que les barrières de code Markdown. Dans ces parties de texte 'échappées', les variables et
directives n'auront pas d'effet et seront recopiées sans interprétation.))

- .{` ``` `.}: code fences surround code text in which directives and variables will not
  be interpreted.
.fr((- .{` ``` `.} : les barrières de code placées sur une ligne isolée entourent du texte
  où les variables et directives ne seront pas interprétées..))
- `"`: double quotes around text neutralize directives and variables, e.g. `".(("` will not close
  the current directive.
.fr((- `"` : les guillemets autour du texte neutralisent les directives et variables, par exemple
`".))"` ne fermera pas le bloc de langue actuel..))
- .{`` ` ``.}: back-ticks around text also neutralize directives and variables, e.g. .{`.((`.}
  will not open default text part.
.fr((- .{`` ` ``.} : les accents inversés simples, doubles ou triples peuvent entourer du texte
échappé, par exemple .{`.((`.} ne commencera pas un bloc de texte par défaut..))

> Quoted and fenced text must be entirely put *inside* enclosing directives (default or language
  directives) as they cannot embed directives.
.fr((> Le texte échappé d'une langue doit intégralement se trouver à l'intérieur des marqueurs
  d'ouverture et fermeture de langue, puisque ces directives ne seront pas interprétées si
  elles se trouvent à l'intérieur du texte échappé..))
> Simple quotes `'` have *no neutralizing effect* and no specific surrounding function.
  MLMD has been designed this way because the simple quote character is used separately in a lot of
  languages for other uses than surrounding text.
.fr((> Les apostrophes `'` n'ont pas d'effet particulier. Ce choix a été fait dans MLMD parce que
  l'apostrophe est utilisé dans de nombreuses langues pour dans d'autres buts que pour entourer
  du texte..))
> Escaping back-ticks: to use actual back-ticks `` ` `` without the special effect, they can be
  embedded in doubled back-ticks with spaces
  (see [Markdown syntax about escapes](https://daringfireball.net/projects/markdown/syntax#autoescape))
  and this whole sequence surrounded by MLMD escaping.
.fr((> Accents inversés : pour utiliser ce caractère sans générer l'effet d'échappement de texte
  ils peut être entouré de double-accent inversé et d'espaces (voir [la syntaxe Markdown pour 
  l'échappement](https://daringfireball.net/projects/markdown/syntax#autoescape) et la séquence
  complète peut être entourée des marqueurs MLmD `.{` et `.}`..))

## Variables

MLMD recognizes a few *variables*. These variables can be put anywhere in headings, links or text in the 
sources and will take a language specific value in the generated files.
.fr((MLMD connait quelques *variables*. Ces variables peuvent être placées n'importe où dans le texte,
les titres ou les liens dans les fichiers sources et prendront lors de la génération une valeur
correspondant à la langue ou au fichier généré.))

.((
| Variable    | Replaced by                                   | Example in generated file         |
|-------------|-----------------------------------------------|-----------------------------------|
| {file}      | Name of the currently generated file          | `file.en.md`              |
| {main}      | Name of main input file with no extension     | `README`                  |
| {extension} | Extension of the currently generated file     | `.en.md`                  |
| {language}  | Language code of the currently generated text | `en`                      |
| {iso}       | ISO code associated to language code          | `en_US`                   |
.)).fr((
| Variable    | Remplacé par                                   | Exemple dans les fichiers générés |
|-------------|------------------------------------------------|-----------------------------------|
| {file}      | Nom du fichier en cours de génération          | `file.fr.md`              |
| {main}      | Nom du fichier principal sans extension        | `README`                  |
| {extension} | Extension du fichier en cours de génération    | `.fr.md`                  |
| {language}  | Code de langue du texte en cours de génération | `fr`                      |
| {iso}       | Code ISO associé au code de langue en cours    | `fr_FR`                   |
.))

The `{main}` variable will be replaced by the generated main file path (from the `-main` script argument).
This allows to link to anchors in the main file, like a global table of content for example. All the
tables of contents generated by MLMD have an anchor named or identified as `toc`. The style of the anchor
depends on the output mode.
.fr((La variable `{main}` sera remplacée par le chemin du fichier principal tel que défini par le paramètre
`-main` de la ligne de commande. Ceci permet de placer des liens vers ce fichier, par exemple pour retourner
au sommaire général. Tout sommaire généré par une directive `.toc` possède une ancre nommée ou
identifiée `toc`. Le style de l'ancre dépend du mode de sortie..))

Each variable takes a value at generation time, except for `{main}` which is only converted to a value
if a `-main` argument has been passed to MLMD. If no `-main` file is defined, the text will stay as
`{main}` in the generated files.
.fr((Toutes les variables prennent une valeur lors de la génération des fichiers, sauf `{main}` qui est
ignorée si le paramètre `-main` n'a pas été spécifié dans la ligne de commande. Si le fichier principal
n'a pas été défini le texte reste `{main}` dans les fichiers générés..))

## Default text.fr((Texte par défaut.))

MLMD accepts default text in any part of the source: headings, table of contents title, normal text etc.
The default text is used by MLMD when no language directive has been used to specify the language specific
text.
.fr((MLMD accepte du texte par défaut à n'importe quel endroit des fichiers sources : dans les tires, les
liens, les tables des matières, les directives ou le corps de texte. Le texte par défaut est utilisé pour
toutes les langues qui n'ont pas de section de texte dédiée..))

When not bounded by opening and closing language directives, text is always considered as default text.
This feature is detailed in the directive `.default((` later.
.fr((En dehors des blocs délimités par les directives d'ouverture et de fermeture de langue, tout texte est
considéré comme du texte par défaut. Ceci est décrit dans la directive `.default((`..))

## Avoiding ambiguities.fr((Comment éviter les ambigüités.))

To avoid undesirable effects with end of lines, unordered or numbered lists and indented text,
a practical structure can be used for both the default text blocks and the language specific blocks.
First the default text opening directive is used on a single line, followed by default text, then a
new line closes default text and open a language section followed by the language specific text,
then a new line closes this section and the structure can be reproduced as many times as needed
for each language.
.fr((Pour éviter les effets indésirables liés aux fins de ligne ou aux listes numérotées ou non,
il y a une structure qui peut séparer dans ambigüité les blocs de texte par défaut ou spécifiques.
En premier lieu on place la directive pour ouvrir une section par défaut sur une ligne seule, suivie
du bloc de texte par défaut, puis sur une nouvelle ligne on ferme la section et on ouvre une nouvelle
pour une langue, suivie du texte pour cette langue, que l'on clot avec une nouvelle ligne. La structure
avec des directives d'ouverture et de fermeture sur des lignes isolées peut être répétée autant de fois
que nécessaire..))

As the following example shows, this structure is easy to read and avoid ambiguity.
.fr((L'exemple suivant montre que cette structure est très lisible et ne laisse planer
aucune incertitude..))

```code
.((
    - Here is some default text with special feature (indented list element)
.)).fr((
    - Voici du texte en français avec une particularité (élément de liste indenté)
.))
```

Although the default opening and closing directives are in fact optional, this structuration
with explicit directives on separate lines is an easy way to make sure the generated text
will be as expected.
.fr((Bien que les directives d'ouverture et fermeture pour le texte par défaut soient en réalité
facultatives, cette structuration avec des directives explicites sur des lignes séparées est un
moyen simple de s'assurer que le texte généré sera celui attendu..))

## Directives

Actions for generating the language specific files are set by *directives* in the sources. MLMD
directives always start with a dot `.` except for escape text markers - see previous details
about escaping text.
.fr((Les actions sur les fichiers et le texte générés pour chaque langue sont indiquées dans des
*directives*  placées dans les fichiers sources. Les directives MLMD commencent toujours par un
point `.`, excepté les marqueurs d'échappement de texte - voir les explications précédentes..))

Directives are of two types:
.fr((Les directives sont de deux sortes :.))

.((
1. Immediate Directives are followed by parameters and modify some of
   the MLMD settings or generate text.
2. Text Directives enclose text between an opening marker `((` and
   an ending marker `))` and apply some effect to it.
.)).fr((
1. Les directives immédiates sont suivies de paramètres et
   modifient certains réglages de MLMD ou génèrent du texte.
2. Les directives de texte commencent et se terminent par un 
   marqueur et entourent du texte source pour lui appliquer un effet.
.))

Here's a summary of the immediate directives:
.fr((Voici un résumé des directives immédiates :.))

.((
- `.languages` declares the language and iso codes available in source files
- `.numbering` sets the numbering scheme for the file headings and TOC
- `.topnumber` sets the number for the level 1 heading in numbering scheme for current file
- `.toc` generates a Table Of Contents in current file from all the chosen headings levels
  and the numbering scheme
.)).fr((
- `.languages` déclare les codes de langue et ISO disponibles dans les fichiers source
- `.numbering` programme le schéma de numérotation pour les titres et les sommaires
- `.topnumber` indique le numéro du titre de niveau 1 du fichier dans le schéma de numérotation
- `.toc` génère un sommaire dans le fichier à partir des titres des niveaux indiqués
   et du schéma de numérotation
.))

Here's a summary of text open/close directives:
.fr((Voici un résumé des directives de texte :.))

- `.all((` starts a text section which will be put in all the language files
- `.default((` or `.((` starts a section which will be put in the language files for which no specific language section is available
- `.ignore((` or `.!((`  starts a text section which will not be put in any generated file.
- `.<code>((` starts a text section which will be put only in the generated file for language `<code>` which has been declared in the `.languages` directive.
- `.))` ends a section started by one of the `.((` directives and returns to the previous directive effect.
- `.{` starts an escaped text section (directives and variables are not interpreted or expanded)
- `.}` ends an escaped text section
.fr((
- `.all((` commence une section de texte qui ira dans les fichiers de toutes les langues
- `.default((` ou `.((` commence le texte par défaut qui ira dans les fichiers des langues n'ayant pas une section spécifique.
- `.ignore((` ou `.!((` commence une section de texte qui ne sera placé dans aucun fichier généré
- `.<code>((` commence une section de texte spécifique à une langue dont le code a été spécifié dans `.languages`
- `.))` termine une section de texte ouverte par une des directives `.((` et repasse à la langue précédente
- `.{` commence une section de texte échappé (pas d'interprétation des variables et directives)
- `.}` termine une section de texte échappé
.))

Directives are not case sensitive: `.fr((` is the same as `.FR((`. Notice that escape text markers 
work as opening and closing directives around escaped text, but as they directly derive from Markdown syntax
the markers will appear in the generated files, whereas MLMD directives won't.
.fr((Les directives ne sont pas sensibles aux minuscules et majuscules : `.fr((` est identique 
à `.FR((`. Il faut souligner que les marqueurs d'échappement de texte fonctionnent comme des directives
mais comme ils dérivent de la syntaxe Markdown ils seront présents dans les fichiers générés alors que
les directives MLMD ne le seront pas..))

## Immediate vs enclosed effect.fr((Effets immédiats et englobés.))

The `.languages`, `.numbering`, `.topnumber` and `.toc` directives have an *immediate effect*.
It implies they generally should be alone on an isolated line, and preferably at the beginning of
source files. (This is mandatory for `.languages`, because anything preceding it will be ignored by MLMD.)
.fr(( Les directives `.languages`, `.numbering`, `.topnumber` et `.toc` ont un effet *immédiat*. Cela
signifie qu'elles doivent généralement se situer sur une ligne isolée et de préference en début de
fichier source. Ceci est obligatoire pour `.languages`, car tout ce qui la précède est ignoré par MLMD.))

The other enclosing directives start with an opening `.<directive>((` marker which *encloses text* until a
matching `.))` is met, or until another `((` directive is opened.
.fr((Les autres directives englobantes commencent par une ouverture comme `.((`, suivie de texte et
ensuite d'une fermeture `.))` ou d'une autre directive d'ouverture..))

> Although this is not very useful, enclosing directives can be embedded: each `.<code>((` opening
will suspend any current opened directive effect, and the matching `.))` closing will resume it.
.fr((> Bien que ce ne soit pas très utile, les directives englobantes peuvent être imbriquées : toute
directive ouvrante `.<code>((` suspend la directive englobante actuelle, et la directive fermante
`.))` la restaurera..))

## Default directives values and effects.fr((Valeurs et effets par défaut.))

Details will follow but it must be mentioned that the script has some defaults and that directives
themselves also have defaults settings.
.fr((Les directives seront détaillées par la suite mais il faut noter que les directives et les scripts
ont des paramètres et des réglages par défaut.))

- Anything preceding the `.languages` directive is *ignored* and won't be written in generated files.
  See [Declaring languages](#declaring-languages-languages).
- Empty lines before the level 1 heading are ignored.
- After the `.languages` directive, MLMD acts as if a `.default((` directive had been met, so any
  text will go into all the languages files except language specific text even before the level 1 heading.
  Notice that text preceding level 1 heading is not Markdown compliant but MLMD will put it in files.
- The `.default((` or `.((` directive will only have effect on languages which do not have a defined
  content yet, any previous `.all` text will make `.default` useless. See []().
- The `.toc` directive has default values which generate an table of contents for local headings of
  levels 2 and 3 in the current file. See [TOC](#generating-table-of-content-toc).
- The table of contents generated in any file always has an implicit anchor named `toc` which can be
  used to link to it from any other file.
.fr((
- ce qui précède la directive `.languages` est ignoré et ne sera écrit dans aucun fichier généré
  Voir [Declarer les langues](#declaring-languages-languages)
- les lignes vides avant le titre de niveau 1 sont ignorées
- Après la directive `.languages`, MLMD agit comme si la directive `.default((` avait été trouvée
  et inscrira le texte dans tous les fichiers sauf ceux avec une section spécifique, même avant le titre
  de niveau 1. Il faut remarquer que Markdown interdit que du texte apparaisse avant le titre de niveau 1
  mais MLMD l'inscrira quand même dans les fichiers générés.
- La directive `.default((` ou `.((` termine toute précédente section de texte par défaut ou spécifique
  à une langue et démarre une nouvelle section de texte par défaut. Voir les détails dans [().]
- La directive `.toc` a des paramètres par défaut pour générer un sommaire local aux titres de niveaux 2 et 3
  du fichier en cours. Voir [TOC](#generating-table-of-content-toc).
- Tout sommaire généré par un fichier possède une ancre nommée ou identifiée `toc` dans le fichier en cours
  pour pouvoir la cibler dans un autre fichier..))