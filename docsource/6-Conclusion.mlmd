.topnumber 6
# Conclusion

Use MLMD to write multilingual documentations sources instead of maintaining different Markdown
files for each language, then generate each language Markdown files from each source.
.fr((MLMD est utilisé pour rédiger des sources de documentation multilingues tout en maintenant
les différentes parties de la documentation dans des fichiers uniques et générer les
fichiers Markdown de chaque langue à partir des sources..))

Here are some use notes.
.fr((Voici quelques notes d'usage..))

.((
- Files
  - Source files must be UTF-8 encoded
  - Use the `.mlmd` extension to distinguish MLMD sources from actual Markdown files
  - Use the `-numbering` script argument to consistently number headings over all files and in TOCs
  - Use the '-out' script argument to have anchors and links adapted to your MD or HTML context
  - Use `-i` script arguments to choose the files to process, or omit `-i` to process all the
    source files in current directory and subdirectories
  - Use the `-od` parameter to generate files in a chosen directory
.)).fr((
- Fichiers
    - Les fichiers sources doivent être encodés en UTF-8
    - l'extension `.mlmd` est utilisée pour distinguer les sources MLMD des fichiers Markdown
    - le paramètre `-numbering` permet de numéroter l'ensemble des titres des fichiers sources de façon homogène
    - le paramètre `-out` permet de choisir le style des ancres et des liens selon le contexte Markdown ou HTML ciblé
    - le paramètre `-i` permet de choisir manuellement les fichiers sources, en son absence tous les fichiers trouvés seront traités
    - le paramètre `-od` permet de choisir le répertoire où seront générés les fichiers Markdown
.))

.((
- Languages and sections
  - Language codes are declared in a `.languages` directive
  - Codes are global to all the source files
  - An optional ISO code can be associated to each language code
  - Any text before the first `.languages` directive is ignored
  - Any language declared with code `<code>` has an opening directive `.<code>((`
  - Any language section must be closed with `.))``
  - Any text outside open/close directives is default text
  - Or use `.((` to open a default text section
  - Default text section are written to all language file for which no language specific section exists
  - Use `.all((` to unconditionally send text into all languages files
  - Use `.!((` to ignore text
.)).fr((
- Langues et sections
  - Les codes des langues sont déclarés dans la directive `.languages``
  - Les codes sont valables sur l'ensemble des fichiers sources traités
  - Un code ISO facultatif peut être associé à chaque code de langue
  - Tout texte est ignoré jusqu'à la rencontre de la directive `.languages``
  - Toute langue déclarée avec le code `<code>` possède une directive d'ouverture `.<code>((`
  - Toute section ouverte doit être fermée avec `.))``
  - Tout texte en dehors des directives d'ouverture et fermeture est du texte par défaut
  - Ou on utilise `.((` pour ouvrir une section de texte par défaut
  - Les sections et le texte par défaut sont écrits dans tous les fichiers des langues qui n'ont pas de section spécifique
  - On utilise `.all((` pour forcer l'écriture dans les fichiers de toutes les langues
  - On utilise `.!((` pour du texte à n'écrire dans aucun fichier
.))

.((
- Headings and text
  - Headings must have a `#` Markdown prefix
  - Put default text for each paragraph and heading before opening languages specific sections
  - Close each opened section with a `.))`
  - Use one end-of-line between directives to visually separate different sections
  - Use the variables to put language specific links or images in text body
  - Markdown styles '===' and '---' for level 1 and 2 are not recognized
.)).fr((
- Titres et texte
  - Les titres doivent avoir un préfixe de style Markdown `#' en début de ligne
  - Placez le texte par défaut de vos paragraphes et titres avant d'ouvrir les sections spécifiques aux langues
  - Fermez chaque section avec `.))`
  - Utilisez des fins de ligne entre les directives pour séparer visuellement les sections
  - Utilisez les variables dans le texte ou dans des liens spécifiques à une langue ou un fichier
  - Le style de titres Markdown '===' et '---' pour les niveaux 1 et 2 n'est pas reconnu
.))

.((
- Table Of Contents (`.toc` directive)
  - Use `level=1` to generate a global TOC with links to all the processed sources
  - Use levels 2 to 9 for a local TOC with links to headings in the file
  - Give your `.toc` directive a title, it will become a level 2 heading in current file
  - Place your `.toc` directive after a level 1 heading and introductory text
  - Use links to `#toc` anchor to place a link to the TOC in your text
.)).fr((
- Sommaire (directive `.toc`)
  - Utilisez `level=1` pour générer un sommaire avec des liens vers chacun des fichiers traités
  - Utilisez les niveaux 2 à 9 pour un sommaire local du fichier en cours
  - Donnez un titre à votre sommaire, il aura le niveau 2 dans le fichier en cours
  - Placez la directive `.toc` après le titre de niveau 1 et une introduction
  - Ciblez `#toc` dans un lien vers le sommaire
.))